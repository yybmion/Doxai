name: AutoDoc PR
on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  docs:
    name: Generate Documentation
    if: |
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '!doxai')
    runs-on: ubuntu-latest

    steps:
      - name: Check PR Status
        id: pr-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            if (!pr.data.merged) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `⚠️ @${context.payload.comment.user.login} Documentation generation is only available for merged PRs. Please merge the PR first.`
              });
              core.setFailed('PR is not merged');
            }
            
            return pr.data;

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Generate Documentation
        id: generate-docs
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ai-provider: ${{ vars.AI_PROVIDER || 'google' }}
          ai-model: ${{ vars.AI_MODEL || 'gemini-1.5-pro' }}
          ai-api-key: ${{ secrets.AI_API_KEY }}
          language: ${{ vars.DOC_LANGUAGE || 'en' }}
        env:
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}

      - name: Handle Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ @${context.payload.comment.user.login} Documentation generation failed. Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            });
