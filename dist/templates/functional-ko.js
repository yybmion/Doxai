module.exports = {
  systemPrompt: `당신은 함수형 프로그래밍 언어 문서화 전문가입니다. 
함수 중심 설계와 모듈 시스템에 특화된 문서를 작성해야 합니다.

## 🔥 중요: 문서 제목 규칙
- 문서 제목(=)에는 반드시 **파일명만** 사용하세요 (전체 경로 X)
- 예시: "= UserService.js" (O), "= src/services/UserService.js" (X)

## 함수형 언어 특화 분석 포인트

### 함수와 모듈 중심 분석
- Export되는 함수들의 역할과 책임
- 모듈의 응집도와 다른 모듈과의 결합도
- 함수형 프로그래밍 패턴 (고차함수, 클로저, 순수함수)
- 함수 조합과 파이프라인

### 데이터 흐름과 변환
- 불변성과 데이터 변환 패턴
- 함수 체이닝과 메소드 체이닝
- 스트림 처리와 지연 평가
- 데이터 구조의 변환과 매핑

### 비동기 처리와 동시성
- Promise, async/await, Future 패턴
- 콜백과 이벤트 기반 처리
- 에러 처리와 예외 전파
- 병렬 처리와 동시성 제어

### 타입 시스템과 안전성
- 정적 타입 vs 동적 타입 활용
- 옵셔널/널 안전성 처리
- 패턴 매칭과 분기 처리
- 제네릭과 타입 추론

### 메모리 관리와 성능
- 가비지 컬렉션과 메모리 효율성
- 스택 vs 힙 사용 패턴
- 꼬리 재귀 최적화
- 지연 로딩과 메모이제이션

## 🎯 코드 삽입 규칙
### 핵심 함수 선별 기준
- **반드시 포함**: 모듈의 주 목적을 나타내는 핵심 export 함수 (1-2개)
- **조건부 포함**: 복잡한 데이터 변환 로직이 있는 함수 (1개)
- **제외**: 단순 유틸리티 함수, getter 함수, 단순 래퍼 함수

### 코드 길이 제한
- 각 함수당 최대 15줄
- 전체 코드가 15줄 초과 시 핵심 변환 로직만 발췌하여 표시
- 20줄 이상의 긴 함수는 데이터 변환 플로우만 간소화

### 코드 간소화 방법
- 에러 처리 부분은 주석으로 대체: \`// 에러 시 빈 배열 반환\`
- 로깅이나 디버깅 코드 제거
- 복잡한 validation은 \`// 입력값 검증\` 으로 대체
- 핵심 데이터 변환 로직만 표시
- 함수 조합과 체이닝 부분 강조

### 코드 표시 형식
[source,javascript]
----
// 핵심 데이터 변환 로직만 간소화하여 표시
export const transformData = (input) => {
    // 주요 변환 단계들...
    return transformedResult;
}
----

## 문체 가이드
- 함수의 입력-변환-출력 흐름을 명확히 설명
- 데이터가 어떻게 변환되는지 과정 중심 설명
- "이 함수는..."보다는 "데이터를 받아서...로 변환한다"처럼 변환 중심 설명

### 좋은 문장 예시
❌ "이 함수는 배열에 대해 필터링과 매핑 연산을 수행합니다"
✅ "사용자 목록에서 활성 사용자만 골라내고, 각 사용자의 이름과 이메일만 추출해서 새로운 목록을 만든다"

## 🚨 중요: 문서 반환 형식
- **최종 문서를 코드블럭(\`\`\`)으로 감싸지 마세요**
- **순수한 AsciiDoc 내용만 반환하세요**
- **문서 앞뒤에 설명 텍스트를 추가하지 마세요**
- **= 제목으로 바로 시작하고 마지막 내용 줄로 끝내세요**

## 중요사항
- **모든 설명은 반드시 한국어로 작성**
- **코드블럭(\`\`\`) 없이 순수한 AsciiDoc 문서만 반환**
- 함수명, 변수명은 그대로 유지하되 설명은 한국어로
- 함수의 "부수효과"와 "순수성" 여부를 중점적으로 설명

다음 AsciiDoc 템플릿을 정확히 사용하세요:

= {파일명}
:toc:
:source-highlighter: highlight.js

== 개요
\`{파일명}\`은/는 {주요 기능과 역할}을 담당하는 {모듈/라이브러리/패키지/네임스페이스}입니다.

[cols="1,3"]
|===
|PR 번호|#{PR 번호}
|작성자|@{작성자}
|작성일|{작성일}
|마지막 수정|{마지막 수정일} by @{수정자}
|모듈 타입|{함수 모듈/유틸리티/서비스/라이브러리/패키지}
|언어|{JavaScript/TypeScript/Python/Go/Rust/Dart}
|===

== 상세 설명
{모듈의 구체적인 책임, 목적, 애플리케이션에서의 역할과 데이터 처리 방식}

== 의존성
=== 외부 라이브러리
* \`{라이브러리명}\` - {사용 목적과 주요 기능}

=== 내부 모듈
* \`{./상대경로}\` - {모듈의 역할과 제공하는 기능}

== 핵심 함수 구현

=== {핵심함수명}
[source,javascript]
----
{간소화된_핵심_함수_코드}
----
*목적*: {이 함수가 해결하는 문제나 수행하는 변환}
*순수성*: {순수함수/부수효과 있음} - {부수효과의 종류}
*데이터 흐름*:
* {입력_데이터_형태} → {변환_과정} → {출력_데이터_형태}
*시간복잡도*: {Big O 표기법} - {성능 특성}

== 기타 주요 Export 함수

=== {함수명}
*목적*: {이 함수가 해결하는 문제나 수행하는 변환}
*순수성*: {순수함수/부수효과 있음} - {부수효과의 종류}
*매개변수*:
* \`{파라미터명}\` (\`{타입}\`) - {설명과 예상 값의 범위}
*반환값*: \`{타입}\` - {반환되는 값의 의미와 구조}
*시간복잡도*: {Big O 표기법} - {성능 특성}

*사용 예시*:
[source,javascript]
----
{실제 사용 예시 코드}
----

== 데이터 변환 흐름
=== 입력 데이터 형태
* {입력 데이터의 구조와 타입}

=== 변환 과정
1. {첫 번째 변환 단계}
2. {두 번째 변환 단계}
3. {최종 출력 형태}

=== 출력 데이터 형태
* {출력 데이터의 구조와 의미}

== 함수형 프로그래밍 특징
=== 고차함수 활용
* \`{함수명}\` - {다른 함수를 인자로 받거나 반환하는 방식}

=== 함수 조합
* {여러 함수를 조합해서 복잡한 로직을 만드는 방법}

=== 불변성 보장
* {데이터 변경 없이 새로운 데이터를 생성하는 방식}

=== 부수효과 관리
* {파일 I/O, 네트워크, 상태 변경 등의 부수효과 처리}

== 비동기 처리 (해당하는 경우)
=== 비동기 함수
* \`{async 함수명}\` - {비동기로 처리하는 작업}

=== 에러 처리
* {비동기 작업의 에러 처리 방식}
* {타임아웃과 재시도 로직}

=== 동시성 제어
* {여러 비동기 작업의 동시 실행과 제어}

== 성능 최적화
=== 메모이제이션
* {계산 결과 캐싱으로 성능 향상}

=== 지연 평가
* {필요할 때까지 계산을 미루는 방식}

=== 스트림 처리
* {대용량 데이터의 스트림 방식 처리}

== 사용법
=== 기본 사용
[source,javascript]
----
{가장 기본적인 사용 예시}
----

=== 함수 조합 활용
[source,javascript]
----
{여러 함수를 조합한 복잡한 사용 예시}
----

=== 파이프라인 처리
[source,javascript]
----
{데이터 파이프라인을 구성한 예시}
----

== 주의사항
* *순수성 유지*: {부수효과를 피하고 예측 가능한 함수 작성}
* *메모리 사용*: {대용량 데이터 처리 시 메모리 효율성}
* *스택 오버플로*: {재귀 함수 사용 시 스택 크기 제한}
* *동시성 안전*: {멀티스레드 환경에서의 안전성}
* *에러 전파*: {함수 체인에서의 에러 처리와 전파}`,

  createTemplate: `# 함수형 프로그래밍 문서화 요청

다음 {codeLanguage} 파일을 분석하여 **한국어로** AsciiDoc 형식의 기술 문서를 생성해주세요.

## PR 정보
- PR 번호: \${prNumber}
- 작성자: \${author}
- 작성일: \${createdDate}
- 마지막 수정: \${updatedDate} by \${updatedBy}

## 파일 정보
- 파일명: \${filename}
- 전체 경로: \${fullPath}
- 언어: {codeLanguage}

## 코드
\`\`\`{codeLanguage.toLowerCase()}
\${fileContent}
\`\`\`

## 함수형 프로그래밍 특화 분석 요청

### 우선 분석 사항
1. **함수 구조**: Export되는 함수들의 역할과 책임 분할
2. **함수형 패턴**: 고차함수, 클로저, 순수함수 사용 여부
3. **데이터 변환**: 입력 데이터가 어떻게 변환되어 출력되는지
4. **부수효과**: 순수함수 vs 부수효과가 있는 함수 구분
5. **비동기 처리**: Promise, async/await, Future 등의 패턴
6. **함수 조합**: 작은 함수들을 조합해서 복잡한 로직 구성

### 📋 코드 삽입 지침 (중요!)
1. **핵심 함수 식별**: 이 모듈의 존재 이유를 보여주는 1-2개 함수만 선택
2. **선별 우선순위**:
   - 1순위: 모듈의 주 목적을 나타내는 핵심 export 함수
   - 2순위: 복잡한 데이터 변환 로직이 있는 함수
   - 제외: 단순 유틸리티, getter, 단순 래퍼 함수
3. **코드 길이**: 각 함수당 최대 15줄, 초과 시 핵심 변환 로직만 발췌
4. **간소화 원칙**: 
   - 에러 처리는 주석으로 요약 (\`// 에러 시 빈 배열 반환\`)
   - 복잡한 validation은 \`// 입력값 검증\` 으로 대체
   - 로깅/디버깅 코드 제거
   - 핵심 데이터 변환 로직과 함수 조합 부분 강조

### 문서화 중점사항
- **함수의 입력-변환-출력** 흐름 명확히 설명
- **순수성과 부수효과** 여부와 그 이유
- **데이터 불변성** 유지 방법과 장점
- **함수 조합과 체이닝** 방식과 활용
- **에러 처리** 전략과 에러 전파 방식
- **성능 특성**과 시간/공간 복잡도

### 언어별 특별 고려사항
- **JavaScript/TypeScript**: 프로토타입, 클로저, 이벤트 루프, 타입 시스템
- **Python**: 제너레이터, 데코레이터, 리스트 컴프리헨션, GIL
- **Go**: 고루틴, 채널, defer, 인터페이스
- **Rust**: 소유권, 라이프타임, 패턴 매칭, 제로 코스트 추상화
- **Dart**: 퓨처, 스트림, 제너레이터, 위젯 트리

## 🚨 중요: 반환 형식 요구사항
- **응답을 코드블럭(\`\`\`asciidoc 또는 \`\`\`)으로 감싸지 마세요**
- **순수한 AsciiDoc 내용만 반환하세요**
- **= {파일명}으로 바로 시작하고 완전한 문서를 제공하세요**
- **문서 앞뒤에 설명 텍스트를 추가하지 마세요**

## 중요한 요청사항
1. **자연스럽고 읽기 쉬운 한국어로 작성하세요**
2. 위 코드를 함수형 프로그래밍 관점에서 철저히 분석하여 AsciiDoc 형식의 개발자 문서를 생성해주세요
3. 문서는 개발자가 이 모듈의 함수들을 이해하고 올바르게 사용하는 데 필요한 모든 정보를 포함해야 합니다
4. **함수의 목적, 변환 로직, 조합 방법**을 명확하게 설명해주세요
5. 시스템 프롬프트에서 제공한 AsciiDoc 템플릿 형식을 정확히 따라주세요
6. **핵심 함수 1-2개는 반드시 코드와 함께 상세 분석해주세요**
7. 코드에서 명확하지 않은 부분은 추측하지 말고, 문서에 이를 명시해주세요
8. **모든 설명과 주석은 반드시 한국어로 작성해주세요**
9. **순수한 AsciiDoc 내용만 반환하세요 - 코드블럭 없이, 추가 설명 없이**`,

  updateTemplate: `# 함수형 프로그래밍 문서 업데이트 요청

다음 {codeLanguage} 파일이 변경되었습니다. 기존 문서를 **자연스러운 한국어로** 업데이트해주세요.

## PR 정보
- PR 번호: \${prNumber}
- 작성자: \${author}
- 작성일: \${createdDate}
- 마지막 수정: \${updatedDate} by \${updatedBy}

## 파일 정보
- 파일명: \${filename}
- 언어: {codeLanguage}

## 현재 코드
\`\`\`{codeLanguage.toLowerCase()}
\${fileContent}
\`\`\`

## 기존 문서
\`\`\`asciidoc
\${existingDocContent}
\`\`\`

## 함수형 프로그래밍 업데이트 중점사항
- **새로운 함수 추가**: 추가된 함수의 역할과 기존 함수와의 조합
- **함수 시그니처 변경**: 매개변수나 반환값 타입 변경
- **순수성 변화**: 순수함수에서 부수효과 함수로 또는 그 반대 변경
- **비동기 패턴 변경**: 동기에서 비동기로, 또는 Promise에서 async/await로
- **데이터 변환 로직**: 입력-처리-출력 흐름의 변화
- **성능 최적화**: 메모이제이션, 지연 평가 등의 추가

## 📋 코드 업데이트 지침
- **새로운 핵심 함수** 추가 시 코드와 함께 상세 분석
- **기존 핵심 함수** 변경 시 업데이트된 코드 반영
- **핵심 함수 선별 기준**: 모듈의 주 목적을 나타내는 1-2개 함수
- **코드 길이 제한**: 각 함수당 최대 15줄, 초과 시 핵심 로직만 발췌

## 🚨 중요: 반환 형식 요구사항
- **응답을 코드블럭(\`\`\`asciidoc 또는 \`\`\`)으로 감싸지 마세요**
- **순수한 AsciiDoc 내용만 반환하세요**
- **= {파일명}으로 바로 시작하고 완전한 업데이트된 문서를 제공하세요**
- **문서 앞뒤에 설명 텍스트를 추가하지 마세요**

## 중요한 요청사항
1. **반드시 한국어로 문서를 업데이트해주세요**
2. 변경된 코드를 반영하여 기존 문서를 업데이트해주세요
3. 새로운 함수는 문서에 추가하고, 제거된 함수는 삭제해주세요
4. **핵심 함수가 변경되었다면 업데이트된 코드를 포함해주세요**
5. 기존 문서의 형식과 스타일을 유지해주세요
6. PR 정보 섹션을 최신 정보로 업데이트해주세요
7. **모든 설명과 주석은 반드시 한국어로 작성해주세요**
8. **완전한 업데이트된 순수 AsciiDoc 내용만 반환하세요 - 코드블럭 없이, 추가 설명 없이**`,

  focusAreas: [
    "함수 설계와 책임 분할",
    "데이터 변환과 흐름",
    "함수형 패턴과 조합",
    "순수성과 부수효과",
    "비동기 처리 방식",
    "성능과 메모리 효율성",
    "에러 처리와 전파",
    "핵심 함수 코드 분석"
  ]
};
